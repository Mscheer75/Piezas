        -:    0:Source:Piezas.cpp
        -:    0:Programs:2
        -:    1:#include "Piezas.h"
        -:    2:#include <vector>
        -:    3:#include <stdio.h>
        -:    4:/** CLASS Piezas
        -:    5: * Class for representing a Piezas vertical board, which is roughly based
        -:    6: * on the game "Connect Four" where pieces are placed in a column and 
        -:    7: * fall to the bottom of the column, or on top of other pieces already in
        -:    8: * that column. For an illustration of the board, see:
        -:    9: *  https://en.wikipedia.org/wiki/Connect_Four
        -:   10: *
        -:   11: * Board coordinates [row,col] should match with:
        -:   12: * [2,0][2,1][2,2][2,3]
        -:   13: * [1,0][1,1][1,2][1,3]
        -:   14: * [0,0][0,1][0,2][0,3]
        -:   15: * So that a piece dropped in column 2 should take [0,2] and the next one
        -:   16: * dropped in column 2 should take [1,2].
        -:   17:**/
        -:   18:
        -:   19:
        -:   20:/**
        -:   21: * Constructor sets an empty board (default 3 rows, 4 columns) and 
        -:   22: * specifies it is X's turn first
        -:   23:**/
function _ZN6PiezasC2Ev called 30 returned 100% blocks executed 76%
       30:   24:Piezas::Piezas()
call    0 returned 30
call    1 never executed
        -:   25:{//resizes the board vector based on the Board sizes, then calls reset to set it to blank
       30:   26:	board.resize(BOARD_ROWS, std::vector <Piece> (BOARD_COLS));
call    0 returned 30
call    1 returned 30
branch  2 taken 30 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 30
branch  5 taken 30 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 30
call    8 returned 30
call    9 never executed
call   10 never executed
        -:   27:	//reset(); <-- I thought I was being clevar by calling this but since you dont initialize it to turn x, this changes everything
       30:   28:	turn = X;	
      120:   29:	for(int i=0; i<BOARD_ROWS; i++)
branch  0 taken 90 (fallthrough)
branch  1 taken 30
      450:   30:		for(int j=0; j<BOARD_COLS; j++)
branch  0 taken 360 (fallthrough)
branch  1 taken 90
      360:   31:			board[i][j] = Blank;
call    0 returned 360
call    1 returned 360
        -:   32:
        -:   33:
        -:   34:
        -:   35:
       30:   36:}
        -:   37:
        -:   38:/**
        -:   39: * Resets each board location to the Blank Piece value, with a board of the
        -:   40: * same size as previously specified
        -:   41:**/
function _ZN6Piezas5resetEv called 4 returned 100% blocks executed 100%
        4:   42:void Piezas::reset()
        -:   43:{//traverse the board and sets it to blank 
        -:   44:	//turn = X;   <-- this should exist I think. Also students will mess this up, I wouldnt be surpised if this is a trap
       16:   45:	for(int i=0; i<BOARD_ROWS; i++)
branch  0 taken 12 (fallthrough)
branch  1 taken 4
       60:   46:		for(int j=0; j<BOARD_COLS; j++)
branch  0 taken 48 (fallthrough)
branch  1 taken 12
       48:   47:			board[i][j] = Blank;
call    0 returned 48
call    1 returned 48
        -:   48:
        -:   49:
        4:   50:}
        -:   51:
        -:   52:/**
        -:   53: * Places a piece of the current turn on the board, returns what
        -:   54: * piece is placed, and toggles which Piece's turn it is. dropPiece does 
        -:   55: * NOT allow to place a piece in a location where a column is full.
        -:   56: * In that case, placePiece returns Piece Blank value 
        -:   57: * Out of bounds coordinates return the Piece Invalid value
        -:   58: * Trying to drop a piece where it cannot be placed loses the player's turn
        -:   59:**/ 
function _ZN6Piezas9dropPieceEi called 280 returned 100% blocks executed 100%
      280:   60:Piece Piezas::dropPiece(int column)
        -:   61:{
      280:   62:	bool placed = false;//a toggle to show if a piece has been placed 
      280:   63:	bool inBounds = false;//a toggle to toggle if the placement is inbounds
      280:   64:	Piece placedPiece = Blank;//a temporary palceholder to return what piece was played
      280:   65:	if( column <= BOARD_COLS && column > -1)
branch  0 taken 229 (fallthrough)
branch  1 taken 51
branch  2 taken 228 (fallthrough)
branch  3 taken 1
        -:   66:	{
      228:   67:		inBounds = true;
      912:   68:		for( int i = 0; i < BOARD_ROWS; i++)
branch  0 taken 684 (fallthrough)
branch  1 taken 228
        -:   69:		{
      684:   70:			if(board[i][column] == Blank && placed == false)
call    0 returned 684
call    1 returned 684
branch  2 taken 440 (fallthrough)
branch  3 taken 244
branch  4 taken 218 (fallthrough)
branch  5 taken 222
branch  6 taken 218 (fallthrough)
branch  7 taken 466
        -:   71:			{
      218:   72:				board[i][column] = turn;
call    0 returned 218
call    1 returned 218
      218:   73:				placed = true;
      218:   74:				placedPiece = turn;
        -:   75:			}
        -:   76:		
        -:   77:		}
        -:   78:	}
        -:   79:
      280:   80:	if (turn == X)//this is to toggle whos turn it is
branch  0 taken 143 (fallthrough)
branch  1 taken 137
        -:   81:	{
      143:   82:		turn = O;
      137:   83:	}else if(turn == O)
branch  0 taken 137 (fallthrough)
branch  1 taken 0
        -:   84:	{
      137:   85:		turn = X;
        -:   86:	}
        -:   87:
      280:   88:	if(!inBounds)
branch  0 taken 52 (fallthrough)
branch  1 taken 228
       52:   89:		placedPiece = Invalid;
        -:   90:
      280:   91:    return placedPiece;
        -:   92:}
        -:   93:
        -:   94:/**
        -:   95: * Returns what piece is at the provided coordinates, or Blank if there
        -:   96: * are no pieces there, or Invalid if the coordinates are out of bounds
        -:   97:**/
function _ZN6Piezas7pieceAtEii called 21 returned 100% blocks executed 100%
       21:   98:Piece Piezas::pieceAt(int row, int column)
        -:   99:{
       21:  100:	if(BOARD_ROWS > row && row >=0 && BOARD_COLS > column && column >= 0)//checks whats is in bounds
branch  0 taken 19 (fallthrough)
branch  1 taken 2
branch  2 taken 19 (fallthrough)
branch  3 taken 0
branch  4 taken 19 (fallthrough)
branch  5 taken 0
branch  6 taken 19 (fallthrough)
branch  7 taken 0
        -:  101:	{
       19:  102:		return board[row][column];//no need for a blank check, if the placement is blank it will return blank
call    0 returned 19
call    1 returned 19
        -:  103:	}
        -:  104:
        2:  105:    return Invalid;
        -:  106:}
        -:  107:
        -:  108:/**
        -:  109: * Returns which Piece has won, if there is a winner, Invalid if the game
        -:  110: * is not over, or Blank if the board is filled and no one has won ("tie").
        -:  111: * For a game to be over, all locations on the board must be filled with X's 
        -:  112: * and O's (i.e. no remaining Blank spaces). The winner is which player has
        -:  113: * the most adjacent pieces in a single line. Lines can go either vertically
        -:  114: * or horizontally. If both X's and O's have the same max number of pieces in a
        -:  115: * line, it is a tie.
        -:  116:**/
function _ZN6Piezas9gameStateEv called 10 returned 100% blocks executed 97%
       10:  117:Piece Piezas::gameState()
        -:  118:{
       10:  119:	int maxX = 0;
       10:  120:	int maxO = 0;
        -:  121:
       10:  122:	int xCount = 1;
       10:  123:	int oCount = 1;
       37:  124:	for(int i = 0; i < BOARD_ROWS; i++)//this checks to see if the board is completely filled
branch  0 taken 28 (fallthrough)
branch  1 taken 9
        -:  125:	{
      137:  126:		for(int j =0; j < BOARD_COLS; j++)
branch  0 taken 110 (fallthrough)
branch  1 taken 27
        -:  127:		{
      110:  128:			if(board[i][j] == Blank || board[i][j] == Invalid)
call    0 returned 110
call    1 returned 110
branch  2 taken 109 (fallthrough)
branch  3 taken 1
call    4 returned 109
call    5 returned 109
branch  6 taken 0 (fallthrough)
branch  7 taken 109
branch  8 taken 1 (fallthrough)
branch  9 taken 109
        1:  129:				return Invalid;
        -:  130:		}
        -:  131:	}
        -:  132:	
       36:  133:	for(int i = 0; i < BOARD_ROWS; i++)//I am having a hard time on this logic 
branch  0 taken 27 (fallthrough)
branch  1 taken 9
        -:  134:	{
        -:  135:		
        -:  136:		/*this is supposed to check the cols and adds xCout or oCount based on the placement
        -:  137:		 *there is another nested for loop that checks the rows and adds them up
        -:  138:		 *this is getting tricky I been working on this for a few hours now
        -:  139:		 *
        -:  140:		 *
        -:  141:		 *I GOT IT!!!!!! 
        -:  142:		 * */
       27:  143:		xCount = 1;
       27:  144:		oCount = 1;
      135:  145:		for(int j =0; j< BOARD_COLS; j++)
branch  0 taken 108 (fallthrough)
branch  1 taken 27
        -:  146:		{
        -:  147:		        	
      108:  148:			if( j-1 >=0 && board[i][j] == board[i][j-1])
branch  0 taken 81 (fallthrough)
branch  1 taken 27
call    2 returned 81
call    3 returned 81
call    4 returned 81
call    5 returned 81
branch  6 taken 36 (fallthrough)
branch  7 taken 45
branch  8 taken 36 (fallthrough)
branch  9 taken 72
        -:  149:			{
       36:  150:				if(board[i][j] == X)
call    0 returned 36
call    1 returned 36
branch  2 taken 21 (fallthrough)
branch  3 taken 15
        -:  151:				{
       21:  152:					xCount++;
       21:  153:					if(xCount > maxX)
branch  0 taken 13 (fallthrough)
branch  1 taken 8
       13:  154:						maxX = xCount;
        -:  155:				}else
        -:  156:				{
       15:  157:					oCount++;
       15:  158:					if(oCount > maxO)
branch  0 taken 9 (fallthrough)
branch  1 taken 6
        9:  159:						maxO = oCount;
        -:  160:
        -:  161:
        -:  162:				}
        -:  163:			}
       72:  164:			else if(j-1 >=0) 
branch  0 taken 45 (fallthrough)
branch  1 taken 27
        -:  165:			{
       45:  166:				if(board[i][j-1] == X)
call    0 returned 45
call    1 returned 45
branch  2 taken 27 (fallthrough)
branch  3 taken 18
        -:  167:				{
       27:  168:					if(xCount > maxX)
branch  0 taken 4 (fallthrough)
branch  1 taken 23
        4:  169:						maxX = xCount;
       27:  170:					xCount = 1;
        -:  171:				}
       18:  172:				else if(board[i][j-1] == O )
call    0 returned 18
call    1 returned 18
branch  2 taken 18 (fallthrough)
branch  3 taken 0
        -:  173:				{
       18:  174:					if(oCount > maxO)
branch  0 taken 3 (fallthrough)
branch  1 taken 15
        3:  175:						maxO = oCount;
        -:  176:
       18:  177:					oCount = 1;
        -:  178:				}
        -:  179:			}
        -:  180:			
        -:  181:		}
        -:  182:	}
        -:  183:	
        -:  184:
       45:  185:	for(int i = 0; i < BOARD_COLS; i++)//nested for loop to check rows
branch  0 taken 36 (fallthrough)
branch  1 taken 9
        -:  186:	{
       36:  187:		xCount = 1;
       36:  188:		oCount = 1;
        -:  189:
      144:  190:		for(int j =0; j < BOARD_ROWS; j++)
branch  0 taken 108 (fallthrough)
branch  1 taken 36
        -:  191:		{//in my mind I rotated the board and are counting the Rows as cols
        -:  192:			
      108:  193:			if(j-1 >=0 && board[j][i] == board[j-1][i]) 
branch  0 taken 72 (fallthrough)
branch  1 taken 36
call    2 returned 72
call    3 returned 72
call    4 returned 72
call    5 returned 72
branch  6 taken 34 (fallthrough)
branch  7 taken 38
branch  8 taken 34 (fallthrough)
branch  9 taken 74
        -:  194:			{
       34:  195:				if(board[j][i] == X )
call    0 returned 34
call    1 returned 34
branch  2 taken 20 (fallthrough)
branch  3 taken 14
        -:  196:				{
       20:  197:					xCount++;
       20:  198:					if(xCount > maxX)
branch  0 taken 4 (fallthrough)
branch  1 taken 16
        4:  199:						maxX = xCount;
        -:  200:
        -:  201:
        -:  202:				}else
        -:  203:				{
       14:  204:					oCount++;
       14:  205:					if(oCount > maxO)
branch  0 taken 2 (fallthrough)
branch  1 taken 12
        2:  206:						maxO = oCount;
        -:  207:
        -:  208:
        -:  209:				}
        -:  210:			}
       74:  211:			else if(BOARD_ROWS > j && j-1 >=0) 
branch  0 taken 74 (fallthrough)
branch  1 taken 0
branch  2 taken 38 (fallthrough)
branch  3 taken 36
        -:  212:			{
       38:  213:				if(board[j-1][i] == X)
call    0 returned 38
call    1 returned 38
branch  2 taken 21 (fallthrough)
branch  3 taken 17
        -:  214:				{
       21:  215:					if(xCount > maxX)
branch  0 taken 0 (fallthrough)
branch  1 taken 21
    #####:  216:						maxX = xCount;
       21:  217:					xCount = 1;
        -:  218:				}
       17:  219:				else if(board[j-1][i] == O)
call    0 returned 17
call    1 returned 17
branch  2 taken 17 (fallthrough)
branch  3 taken 0
        -:  220:				{
       17:  221:					if(oCount > maxO)
branch  0 taken 0 (fallthrough)
branch  1 taken 17
    #####:  222:						maxO = oCount;
        -:  223:
       17:  224:					oCount = 1;
        -:  225:				}
        -:  226:			}	
        -:  227:		}
        -:  228:	}
        9:  229:	printf("maxX %i \n", maxX);
call    0 returned 9
        9:  230:	printf("maxO %i \n", maxO);	
call    0 returned 9
        9:  231:	if( maxX > maxO)
branch  0 taken 3 (fallthrough)
branch  1 taken 6
        3:  232:    		return X;
        6:  233:	else if(maxO > maxX)
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####:  234:		return O;
        -:  235:	else 
        6:  236:		return Blank;
        -:  237:}
        -:  238:
